daemon off;
user root;

worker_processes  1;
error_log stderr;

env MEMCACHED_PORT_11211_TCP_ADDR;

events {
    worker_connections 1024;
}

http {
    server {
        access_log /dev/stdout;
        listen 8080;
        resolver 8.8.8.8 ipv6=off;

        proxy_cache_key "$scheme$request_method$host$request_uri$is_args$args";
        proxy_cache_valid 200 302 1m;
        proxy_cache_valid 404 1m;


        location / {
            set $target '';
            default_type text/html;

            access_by_lua '
                -- one minute timeout
                local timeout = 60

                -- instantiating memcached
                local memcached = require "resty.memcached"
                local memc, err = memcached:new()
                if not memc then
                    ngx.say("failed to instantiate memc: ", err)
                    return
                end

                -- connecting to memcached
                local ok, err = memc:connect(os.getenv("MEMCACHED_PORT_11211_TCP_ADDR"), 11211)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

                local ip = nil

                -- trying to get cached IP address
                local ip, err = memc:get(ngx.var.remote_addr)
                if not ip then
                     -- Starting real server container
                    local f = io.popen("docker run -d nginx", "r")
                    local r = f:read("*a")
                    f:close()

                    -- start a side kick container
                    local f = io.popen(string.format([[bash -c "sleep 30 && docker rm -f %s" & ]], r))
                    f:close()

                    -- Retrive cotainers ip address (probably we can achieve samething with links)
                    local f = io.popen(string.format([[docker inspect -f "{{.NetworkSettings.IPAddress}}" %s]], r))
                    ip = f:read("*a")
                    f:close()

                    memc:set(ngx.var.remote_addr, ip, 30);
                end

                memc:close()

                -- redirect to actual server
                ngx.var.target = ip:gsub("^%s*(.-)%s*$", "%1")
            ';

            proxy_pass http://$target:80/;

        }
    }
}
